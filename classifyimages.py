# -*- coding: utf-8 -*-
"""ClassifyImages.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1K_7aYVChm9hulXGfIY4LIsU2R6dF2k9W
"""

import tensorflow as tf
from tensorflow  import keras
from keras.models import Sequential
from keras.layers import Dense, Flatten, Conv2D, MaxPooling2D, Dropout
from tensorflow.keras import layers
from tensorflow.keras.utils import to_categorical

import numpy as np
import matplotlib.pyplot as plt
plt.style.use("fivethirtyeight")

##Load data
from keras.datasets import cifar10
(x_train, y_train), (x_test, y_test) = cifar10.load_data()

## Look at the datatypes
print(type(x_train))
print(type(y_train))
print(type(x_test))
print(type(y_test))

# Get the shape of the arrays
print("x_train shape:", x_train.shape)
print("y_train shape:", y_train.shape)
print("x_test shape:", x_test.shape)
print("y_test shape:", y_test.shape)

#Take a look at the first image as an array
index = 45
x_train[index]

# get the image label
print("The image label is:", y_train[index])

# Get the image classification
classification = ["airplane", "automobile", "bird", "cat", "deer", "dog", "frog", "horse","ship","truck"]
#print the image class
print("The image class is:",classification[y_train[index][0]])

#Conver the labels into a set of 10 numbers to input into the neural network
y_train_one_hot = to_categorical(y_train)
y_test_one_hot = to_categorical(y_test)

#Print the new labels
print(y_test_one_hot)

# Print the new label of the image/picture above
print("The one hot label is:", y_train_one_hot[index])

# Normalize the pixels to be values between 0 and 1
x_train = x_train/255
x_test = x_test/255

x_train[index]

# Create the mode's architecture
model = Sequential()

# Add the first layer
model.add(Conv2D(32, (5,5), 1, activation ="relu", input_shape=(32,32,3)))

# Add a pooling layer
model.add(MaxPooling2D(pool_size=(2,2)))

# Add Convolution layer
model.add(Conv2D(32, (5,5), 1, activation ="relu"))

# Add a pooling layer
model.add(MaxPooling2D(pool_size=(2,2)))

# Add a flattening layer
model.add(Flatten())

# Add a layer with 1024 neurons
model.add(Dense(1024, activation="relu"))

# Add a drop out layer
model.add(Dropout(0.5))

# Add a layer with 512 neurons
model.add(Dense(512, activation="relu"))

# Add a drop out layer
model.add(Dropout(0.5))

# Add a layer with 256 neurons
model.add(Dense(256, activation="relu"))

# Add a layer with 10 neurons
model.add(Dense(10, activation="softmax"))

# Compile the model
model.compile(loss="categorical_crossentropy",
              optimizer="adam",
              metrics=["accuracy"])

# Train the model
hist = model.fit(x_train,y_train_one_hot,
                 batch_size=256,
                 epochs=10,
                 validation_split=0.2)

# Evaluate the model using the test dataset
model.evaluate(x_test, y_test_one_hot)[1]

# Visualize the model's accuracy
plt.plot(hist.history["accuracy"])
plt.plot(hist.history["val_accuracy"])
plt.title("Model's Accuracy")
plt.ylabel("Accuracy")
plt.xlabel("Epochs")
plt.legend(["Train", "Val"], loc ="upper left")
plt.show()

# Visualize the model's loss
plt.plot(hist.history["loss"])
plt.plot(hist.history["val_loss"])
plt.title("Model's loss")
plt.ylabel("Loss")
plt.xlabel("Epochs")
plt.legend(["Train", "Val"], loc ="upper right")
plt.show()

# Test the modle with an example
new_image = plt.imread("/content/truck.jpg")
img = plt.imshow(new_image)

#Resize the image
import cv2
resized_image =cv2.resize(new_image,(32,32))
img = plt.imshow(resized_image)

# Get the models predictions
predictions = model.predict(np.array([resized_image]))
#Show the predictions
predictions

# sort the predictions from least to greatest
list_index = [0,1,2,3,4,5,6,7,8,9]
x = predictions

for i in range(10):
  for j in range(10):
    if x[0][list_index[i]] > x[0][list_index[j]]:
      temp = list_index[i]
      list_index[i] = list_index[j]
      list_index[j] = temp
# sgow shorted labels in oreder
print(list_index)

# print the first 5 predictions
for i in range(5):
  print(classification[list_index[i]], ":",round(predictions[0][list_index[i]] * 100,2),"%")

